const cheerio = require('cheerio');
const { parseDate } = require('@/utils/parse-date');
const logger = require('@/utils/logger');

module.exports = async (ctx) => {
    const { type } = ctx.params;
    const baseUrl = 'https://zeroday.hitcon.org/vulnerability';

    const link = `${baseUrl}${type ? `/${type}` : ''}`;
    const browser = await require('@/utils/puppeteer')();
    const page = await browser.newPage();
    await page.setRequestInterception(true);
    page.on('request', (request) => {
        request.resourceType() === 'document' || request.resourceType() === 'script' ? request.continue() : request.abort();
    });
    logger.http(`Requesting: ${link}`);
    await page.goto(link, {
        waitUntil: 'domcontentloaded',
    });
    await page.waitForSelector('.strip');

    const response = await page.content();
    await page.close();

    const $ = cheerio.load(response);

    const list = $('.strip')
        .toArray()
        .map((item) => {
            item = $(item);
            const a = item.find('.title a');
            return {
                title: a.text(),
                link: new URL(a.attr('href'), baseUrl).href,
                author: item.find('.zdui-author-badge a span').text(),
                pubDate: parseDate(
                    item
                        .find('.date')
                        .contents()
                        .filter((_, el) => el.nodeType === 3)
                        .text(),
                    'YYYY-MM-DD'
                ),
            };
        });

    const items = await Promise.all(
        list.map((item) =>
            ctx.cache.tryGet(item.link, async () => {
                const page = await browser.newPage();
                await page.setRequestInterception(true);
                page.on('request', (request) => {
                    request.resourceType() === 'document' || request.resourceType() === 'script' ? request.continue() : request.abort();
                });
                logger.http(`Requesting: ${item.link}`);
                await page.goto(item.link, {
                    waitUntil: 'domcontentloaded',
                });
                await page.waitForSelector('.vul-detail-article');

                const response = await page.content();
                await page.close();

                const $ = cheerio.load(response);

                const container = $('.vul-detail-article .container');
                container.find('.always-not-there, .title, .vu-d-cmnt').remove();
                container.find('*').each((_, el) => {
                    $(el).removeAttr('onclick');
                });

                item.description = container.html();

                return item;
            })
        )
    );
    await browser.close();

    ctx.state.data = {
        title: `${$('.page-sub-title').text()} - ${$('.content-section h3').text()} - ${$('head title').text()}`,
        description: $('.descr').text(),
        link,
        item: items,
    };
};
